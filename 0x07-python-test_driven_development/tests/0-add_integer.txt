Module 0-add_integer

Function add_integer(a, b=98) defines the addition of two args/
It's expected to be used with integer or float values
	>>> add_integer = __import__('0-add_integer').add_integer

It works with positive arguments


	>>> add_integer(4, 12)
	16
	>>> add_integer(3, 0)
	3

Or, negative arguments

	>>> add_integer(-4, 2)
	-2
	>>> add_integer(-3, -2)
	-5

Float numbers (positive or negative) will be rounded and treated as integers

	>>> add_integer(2.80, 1)
	3
	>>> add_integer(1, 3.14)
	4

If the second parameter is missing, value 98 will be assigned as default

	>>> add_integer(1)
	99
	>>> add_integer(100)
	198
	>>> add_integer(-18)
	80

In case of more than two arguments, a TypeError is raised
	>>> add_integer(1, 2, 3)
	Traceback (most recent call last):
	TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

If one or both arguments are not int or float a TypeError is raised
	
	>>> add_integer("Hello", 5)
	Traceback (most recent call last):
	TypeError: a must be an integer

	>>> add_integer(10, "Hello")
	Traceback (most recent call last):
	TypeError: b must be an integer

If infinity is provided as a value, function will fail
	
	>>> add_integer(float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

Similar with not numbers
	
	>>> add_integer(float('nan'))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer
